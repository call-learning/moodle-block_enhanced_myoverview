{"version":3,"file":"view.min.js","sources":["../src/view.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Manage the courses view for the overview block.\n *\n * @copyright  2018 Bas Brands <bas@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(\n    [\n        'jquery',\n        'block_myoverview/repository',\n        'core/paged_content_factory',\n        'core/pubsub',\n        'core/custom_interaction_events',\n        'core/notification',\n        'core/templates',\n        'core_course/events',\n        'block_myoverview/selectors',\n        'core/paged_content_events',\n        'core/ajax'\n    ],\n    function(\n        $,\n        Repository,\n        PagedContentFactory,\n        PubSub,\n        CustomEvents,\n        Notification,\n        Templates,\n        CourseEvents,\n        Selectors,\n        PagedContentEvents,\n        Ajax\n\n    ) {\n\n        /**\n         * Retrieve a list of enrolled courses.\n         *\n         * Valid args are:\n         * string classification    future, inprogress, past\n         * int limit                number of records to retreive\n         * int Offset               offset for pagination\n         * int sort                 sort by lastaccess or name\n         *\n         * @method getEnrolledCoursesByTimeline\n         * @param {object} args The request arguments\n         * @return {promise} Resolved with an array of courses\n         */\n        let EnhancedRepostory = Object.assign({}, Repository);\n        EnhancedRepostory.getEnrolledCoursesByTimeline = function(args) {\n            let request = {\n                methodname: 'block_enhanced_myoverview_get_enrolled_courses_by_timeline_classification',\n                args: args\n            };\n\n            return Ajax.call([request])[0];\n        };\n\n        let SELECTORS = {\n            COURSE_REGION: '[data-region=\"course-view-content\"]',\n            ACTION_HIDE_COURSE: '[data-action=\"hide-course\"]',\n            ACTION_SHOW_COURSE: '[data-action=\"show-course\"]',\n            ACTION_ADD_FAVOURITE: '[data-action=\"add-favourite\"]',\n            ACTION_REMOVE_FAVOURITE: '[data-action=\"remove-favourite\"]',\n            FAVOURITE_ICON: '[data-region=\"favourite-icon\"]',\n            ICON_IS_FAVOURITE: '[data-region=\"is-favourite\"]',\n            ICON_NOT_FAVOURITE: '[data-region=\"not-favourite\"]',\n            PAGED_CONTENT_CONTAINER: '[data-region=\"page-container\"]'\n\n        };\n\n        let TEMPLATES = {\n            COURSES_CARDS: 'block_myoverview/view-cards',\n            COURSES_LIST: 'block_myoverview/view-list',\n            COURSES_SUMMARY: 'block_myoverview/view-summary',\n            NOCOURSES: 'core_course/no-courses'\n        };\n\n        let GROUPINGS = {\n            GROUPING_ALLINCLUDINGHIDDEN: 'allincludinghidden',\n            GROUPING_ALL: 'all',\n            GROUPING_INPROGRESS: 'inprogress',\n            GROUPING_FUTURE: 'future',\n            GROUPING_PAST: 'past',\n            GROUPING_FAVOURITES: 'favourites',\n            GROUPING_HIDDEN: 'hidden'\n        };\n\n        let NUMCOURSES_PERPAGE = [12, 24, 48, 96, 0];\n\n        let loadedPages = [];\n\n        let courseOffset = 0;\n\n        let lastPage = 0;\n\n        let lastLimit = 0;\n\n        let namespace = null;\n\n        /**\n         * Get filter values from DOM.\n         *\n         * @param {object} root The root element for the courses view.\n         * @return {filters} Set filters.\n         */\n        let getFilterValues = function(root) {\n            let courseRegion = root.find(Selectors.courseView.region);\n            return {\n                display: courseRegion.attr('data-display'),\n                grouping: courseRegion.attr('data-grouping'),\n                sort: courseRegion.attr('data-sort'),\n                displaycategories: courseRegion.attr('data-displaycategories'),\n                customfieldname: courseRegion.attr('data-customfieldname'),\n                customfieldvalue: courseRegion.attr('data-customfieldvalue'),\n                additionalfilter: courseRegion.attr('data-additionalfilter')\n            };\n        };\n\n        // We want the paged content controls below the paged content area.\n        // and the controls should be ignored while data is loading.\n        let DEFAULT_PAGED_CONTENT_CONFIG = {\n            ignoreControlWhileLoading: true,\n            controlPlacementBottom: true,\n            persistentLimitKey: 'block_myoverview_user_paging_preference'\n        };\n\n        /**\n         * Get enrolled courses from backend.\n         *\n         * @param {object} filters The filters for this view.\n         * @param {int} limit The number of courses to show.\n         * @return {promise} Resolved with an array of courses.\n         */\n        let getMyCourses = function(filters, limit) {\n\n            return EnhancedRepostory.getEnrolledCoursesByTimeline({\n                offset: courseOffset,\n                limit: limit,\n                classification: filters.grouping,\n                sort: filters.sort,\n                customfieldname: filters.customfieldname,\n                customfieldvalue: filters.customfieldvalue,\n                additionalfilter: filters.additionalfilter\n            });\n        };\n\n        /**\n         * Get the container element for the favourite icon.\n         *\n         * @param  {Object} root The course overview container\n         * @param  {Number} courseId Course id number\n         * @return {Object} The favourite icon container\n         */\n        let getFavouriteIconContainer = function(root, courseId) {\n            return root.find(SELECTORS.FAVOURITE_ICON + '[data-course-id=\"' + courseId + '\"]');\n        };\n\n        /**\n         * Get the paged content container element.\n         *\n         * @param  {Object} root The course overview container\n         * @param  {Number} index Rendered page index.\n         * @return {Object} The rendered paged container.\n         */\n        let getPagedContentContainer = function(root, index) {\n            return root.find('[data-region=\"paged-content-page\"][data-page=\"' + index + '\"]');\n        };\n\n        /**\n         * Get the course id from a favourite element.\n         *\n         * @param {Object} root The favourite icon container element.\n         * @return {Number} Course id.\n         */\n        let getCourseId = function(root) {\n            return root.attr('data-course-id');\n        };\n\n        /**\n         * Hide the favourite icon.\n         *\n         * @param {Object} root The favourite icon container element.\n         * @param  {Number} courseId Course id number.\n         */\n        let hideFavouriteIcon = function(root, courseId) {\n            let iconContainer = getFavouriteIconContainer(root, courseId);\n            let isFavouriteIcon = iconContainer.find(SELECTORS.ICON_IS_FAVOURITE);\n            isFavouriteIcon.addClass('hidden');\n            isFavouriteIcon.attr('aria-hidden', true);\n            let notFavourteIcon = iconContainer.find(SELECTORS.ICON_NOT_FAVOURITE);\n            notFavourteIcon.removeClass('hidden');\n            notFavourteIcon.attr('aria-hidden', false);\n        };\n\n        /**\n         * Show the favourite icon.\n         *\n         * @param  {Object} root The course overview container.\n         * @param  {Number} courseId Course id number.\n         */\n        let showFavouriteIcon = function(root, courseId) {\n            let iconContainer = getFavouriteIconContainer(root, courseId);\n            let isFavouriteIcon = iconContainer.find(SELECTORS.ICON_IS_FAVOURITE);\n            isFavouriteIcon.removeClass('hidden');\n            isFavouriteIcon.attr('aria-hidden', false);\n            let notFavourteIcon = iconContainer.find(SELECTORS.ICON_NOT_FAVOURITE);\n            notFavourteIcon.addClass('hidden');\n            notFavourteIcon.attr('aria-hidden', true);\n        };\n\n        /**\n         * Get the action menu item\n         *\n         * @param {Object} root  root The course overview container\n         * @param {Number} courseId Course id.\n         * @return {Object} The add to favourite menu item.\n         */\n        let getAddFavouriteMenuItem = function(root, courseId) {\n            return root.find('[data-action=\"add-favourite\"][data-course-id=\"' + courseId + '\"]');\n        };\n\n        /**\n         * Get the action menu item\n         *\n         * @param {Object} root  root The course overview container\n         * @param {Number} courseId Course id.\n         * @return {Object} The remove from favourites menu item.\n         */\n        let getRemoveFavouriteMenuItem = function(root, courseId) {\n            return root.find('[data-action=\"remove-favourite\"][data-course-id=\"' + courseId + '\"]');\n        };\n\n        /**\n         * Add course to favourites\n         *\n         * @param  {Object} root The course overview container\n         * @param  {Number} courseId Course id number\n         */\n        let addToFavourites = function(root, courseId) {\n            let removeAction = getRemoveFavouriteMenuItem(root, courseId);\n            let addAction = getAddFavouriteMenuItem(root, courseId);\n\n            setCourseFavouriteState(courseId, true).then(function(success) {\n                if (success) {\n                    PubSub.publish(CourseEvents.favourited, courseId);\n                    removeAction.removeClass('hidden');\n                    addAction.addClass('hidden');\n                    showFavouriteIcon(root, courseId);\n                } else {\n                    Notification.alert('Starring course failed', 'Could not change favourite state');\n                }\n\n            }).catch(Notification.exception);\n        };\n\n        /**\n         * Remove course from favourites\n         *\n         * @param  {Object} root The course overview container\n         * @param  {Number} courseId Course id number\n         */\n        let removeFromFavourites = function(root, courseId) {\n            let removeAction = getRemoveFavouriteMenuItem(root, courseId);\n            let addAction = getAddFavouriteMenuItem(root, courseId);\n\n            setCourseFavouriteState(courseId, false).then(function(success) {\n                if (success) {\n                    PubSub.publish(CourseEvents.unfavorited, courseId);\n                    removeAction.addClass('hidden');\n                    addAction.removeClass('hidden');\n                    hideFavouriteIcon(root, courseId);\n                } else {\n                    Notification.alert('Starring course failed', 'Could not change favourite state');\n                }\n\n            }).catch(Notification.exception);\n        };\n\n        /**\n         * Get the action menu item\n         *\n         * @param {Object} root  root The course overview container\n         * @param {Number} courseId Course id.\n         * @return {Object} The hide course menu item.\n         */\n        let getHideCourseMenuItem = function(root, courseId) {\n            return root.find('[data-action=\"hide-course\"][data-course-id=\"' + courseId + '\"]');\n        };\n\n        /**\n         * Get the action menu item\n         *\n         * @param {Object} root  root The course overview container\n         * @param {Number} courseId Course id.\n         * @return {Object} The show course menu item.\n         */\n        let getShowCourseMenuItem = function(root, courseId) {\n            return root.find('[data-action=\"show-course\"][data-course-id=\"' + courseId + '\"]');\n        };\n\n        /**\n         * Hide course\n         *\n         * @param  {Object} root The course overview container\n         * @param  {Number} courseId Course id number\n         */\n        let hideCourse = function(root, courseId) {\n            let hideAction = getHideCourseMenuItem(root, courseId);\n            let showAction = getShowCourseMenuItem(root, courseId);\n            let filters = getFilterValues(root);\n\n            setCourseHiddenState(courseId, true);\n\n            // Remove the course from this view as it is now hidden and thus not covered by this view anymore.\n            // Do only if we are not in \"All\" view mode where really all courses are shown.\n            if (filters.grouping !== GROUPINGS.GROUPING_ALLINCLUDINGHIDDEN) {\n                hideElement(root, courseId);\n            }\n\n            hideAction.addClass('hidden');\n            showAction.removeClass('hidden');\n        };\n\n        /**\n         * Show course\n         *\n         * @param  {Object} root The course overview container\n         * @param  {Number} courseId Course id number\n         */\n        let showCourse = function(root, courseId) {\n            let hideAction = getHideCourseMenuItem(root, courseId);\n            let showAction = getShowCourseMenuItem(root, courseId);\n            let filters = getFilterValues(root);\n\n            setCourseHiddenState(courseId, null);\n\n            // Remove the course from this view as it is now shown again and thus not covered by this view anymore.\n            // Do only if we are not in \"All\" view mode where really all courses are shown.\n            if (filters.grouping !== GROUPINGS.GROUPING_ALLINCLUDINGHIDDEN) {\n                hideElement(root, courseId);\n            }\n\n            hideAction.removeClass('hidden');\n            showAction.addClass('hidden');\n        };\n\n        /**\n         * Set the courses hidden status and push to repository\n         *\n         * @param  {Number} courseId Course id to favourite.\n         * @param  {Boolean} status new hidden status.\n         * @return {Promise} EnhancedRepostory promise.\n         */\n        let setCourseHiddenState = function(courseId, status) {\n\n            // If the given status is not hidden, the preference has to be deleted with a null value.\n            if (status === false) {\n                status = null;\n            }\n            return EnhancedRepostory.updateUserPreferences({\n                preferences: [\n                    {\n                        type: 'block_myoverview_hidden_course_' + courseId,\n                        value: status\n                    }\n                ]\n            });\n        };\n\n        /**\n         * Reset the loadedPages dataset to take into account the hidden element\n         *\n         * @param {Object} root The course overview container\n         * @param {Number} id The course id number\n         */\n        let hideElement = function(root, id) {\n            let pagingBar = root.find('[data-region=\"paging-bar\"]');\n            let jumpto = parseInt(pagingBar.attr('data-active-page-number'));\n\n            // Get a reduced dataset for the current page.\n            let courseList = loadedPages[jumpto];\n            let reducedCourse = courseList.courses.reduce(function(accumulator, current) {\n                if (id !== current.id) {\n                    accumulator.push(current);\n                }\n                return accumulator;\n            }, []);\n\n            // Get the next page's data if loaded and pop the first element from it.\n            if (loadedPages[jumpto + 1] !== undefined) {\n                let newElement = loadedPages[jumpto + 1].courses.slice(0, 1);\n\n                // Adjust the dataset for the reset of the pages that are loaded.\n                loadedPages.forEach(function(courseList, index) {\n                    if (index > jumpto) {\n                        let popElement = [];\n                        if (loadedPages[index + 1] !== undefined) {\n                            popElement = loadedPages[index + 1].courses.slice(0, 1);\n                        }\n\n                        loadedPages[index].courses = $.merge(loadedPages[index].courses.slice(1), popElement);\n                    }\n                });\n\n\n                reducedCourse = $.merge(reducedCourse, newElement);\n            }\n\n            // Check if the next page is the last page and if it still has data associated to it.\n            if (lastPage === jumpto + 1 && loadedPages[jumpto + 1].courses.length === 0) {\n                let pagedContentContainer = root.find('[data-region=\"paged-content-container\"]');\n                PagedContentFactory.resetLastPageNumber($(pagedContentContainer).attr('id'), jumpto);\n            }\n\n            loadedPages[jumpto].courses = reducedCourse;\n\n            // Reduce the course offset.\n            courseOffset--;\n\n            // Render the paged content for the current.\n            let pagedContentPage = getPagedContentContainer(root, jumpto);\n            renderCourses(root, loadedPages[jumpto]).then(function(html, js) {\n                return Templates.replaceNodeContents(pagedContentPage, html, js);\n            }).catch(Notification.exception);\n\n            // Delete subsequent pages in order to trigger the callback.\n            loadedPages.forEach(function(courseList, index) {\n                if (index > jumpto) {\n                    let page = getPagedContentContainer(root, index);\n                    page.remove();\n                }\n            });\n        };\n\n        /**\n         * Set the courses favourite status and push to repository\n         *\n         * @param  {Number} courseId Course id to favourite.\n         * @param  {Boolean} status new favourite status.\n         * @return {Promise} EnhancedRepostory promise.\n         */\n        let setCourseFavouriteState = function(courseId, status) {\n\n            return EnhancedRepostory.setFavouriteCourses({\n                courses: [\n                    {\n                        'id': courseId,\n                        'favourite': status\n                    }\n                ]\n            }).then(function(result) {\n                if (result.warnings.length === 0) {\n                    loadedPages.forEach(function(courseList) {\n                        courseList.courses.forEach(function(course, index) {\n                            if (course.id === courseId) {\n                                courseList.courses[index].isfavourite = status;\n                            }\n                        });\n                    });\n                    return true;\n                } else {\n                    return false;\n                }\n            }).catch(Notification.exception);\n        };\n\n        /**\n         * Render the dashboard courses.\n         *\n         * @param {object} root The root element for the courses view.\n         * @param {array} coursesData containing array of returned courses.\n         * @return {promise} jQuery promise resolved after rendering is complete.\n         */\n        let renderCourses = function(root, coursesData) {\n\n            const filters = getFilterValues(root);\n\n            let currentTemplate;\n            if (filters.display === 'card') {\n                currentTemplate = TEMPLATES.COURSES_CARDS;\n            } else if (filters.display === 'list') {\n                currentTemplate = TEMPLATES.COURSES_LIST;\n            } else {\n                currentTemplate = TEMPLATES.COURSES_SUMMARY;\n            }\n\n            // Whether the course category should be displayed in the course item.\n            coursesData.courses = coursesData.courses.map(function(course) {\n                course.showcoursecategory = filters.displaycategories === 'on';\n                return course;\n            });\n\n            if (coursesData.courses.length) {\n                return Templates.render(currentTemplate, {\n                    courses: coursesData.courses,\n                });\n            } else {\n                let nocoursesimg = root.find(Selectors.courseView.region).attr('data-nocoursesimg');\n                return Templates.render(TEMPLATES.NOCOURSES, {\n                    nocoursesimg: nocoursesimg\n                });\n            }\n        };\n\n        /**\n         * Return the callback to be passed to the subscribe event\n         *\n         * @param {Number} limit The paged limit that is passed through the event\n         */\n        let setLimit = function(limit) {\n            this.find(Selectors.courseView.region).attr('data-paging', limit);\n        };\n\n        /**\n         * Intialise the paged list and cards views on page load.\n         * Returns an array of paged contents that we would like to handle here\n         *\n         * @param {object} root The root element for the courses view\n         * @param {string} namespace The namespace for all the events attached\n         */\n        let registerPagedEventHandlers = function(root, namespace) {\n            let event = namespace + PagedContentEvents.SET_ITEMS_PER_PAGE_LIMIT;\n            PubSub.subscribe(event, setLimit.bind(root));\n        };\n\n        /**\n         * Intialise the courses list and cards views on page load.\n         *\n         * @param {object} root The root element for the courses view.\n         */\n        let initializePagedContent = function(root) {\n            namespace = \"block_myoverview_\" + root.attr('id') + \"_\" + Math.random();\n\n            let pagingLimit = parseInt(root.find(Selectors.courseView.region).attr('data-paging'), 10);\n            let itemsPerPage = NUMCOURSES_PERPAGE.map(function(value) {\n                let active = false;\n                if (value === pagingLimit) {\n                    active = true;\n                }\n\n                return {\n                    value: value,\n                    active: active\n                };\n            });\n\n            // Filter out all pagination options which are too large for the amount of courses user is enrolled in.\n            let totalCourseCount = parseInt(root.find(Selectors.courseView.region).attr('data-totalcoursecount'), 10);\n            itemsPerPage = itemsPerPage.filter(function(pagingOption) {\n                return pagingOption.value < totalCourseCount || pagingOption.value === 0;\n            });\n\n            let filters = getFilterValues(root);\n            let config = $.extend({}, DEFAULT_PAGED_CONTENT_CONFIG);\n            config.eventNamespace = namespace;\n\n            let pagedContentPromise = PagedContentFactory.createWithLimit(\n                itemsPerPage,\n                function(pagesData, actions) {\n                    let promises = [];\n\n                    pagesData.forEach(function(pageData) {\n                        let currentPage = pageData.pageNumber;\n                        let limit = (pageData.limit > 0) ? pageData.limit : 0;\n\n                        // Reset local variables if limits have changed.\n                        if (lastLimit !== limit) {\n                            loadedPages = [];\n                            courseOffset = 0;\n                            lastPage = 0;\n                        }\n\n                        if (lastPage === currentPage) {\n                            // If we are on the last page and have it's data then load it from cache.\n                            actions.allItemsLoaded(lastPage);\n                            promises.push(renderCourses(root, loadedPages[currentPage]));\n                            return;\n                        }\n\n                        lastLimit = limit;\n\n                        // Get 2 pages worth of data as we will need it for the hidden functionality.\n                        if (loadedPages[currentPage + 1] === undefined) {\n                            if (loadedPages[currentPage] === undefined) {\n                                limit *= 2;\n                            }\n                        }\n\n                        let pagePromise = getMyCourses(\n                            filters,\n                            limit\n                        ).then(function(coursesData) {\n                            let courses = coursesData.courses;\n                            let nextPageStart = 0;\n                            let pageCourses;\n\n                            // If current page's data is loaded make sure we max it to page limit.\n                            if (loadedPages[currentPage] !== undefined) {\n                                pageCourses = loadedPages[currentPage].courses;\n                                let currentPageLength = pageCourses.length;\n                                if (currentPageLength < pageData.limit) {\n                                    nextPageStart = pageData.limit - currentPageLength;\n                                    pageCourses = $.merge(loadedPages[currentPage].courses, courses.slice(0, nextPageStart));\n                                }\n                            } else {\n                                // When the page limit is zero, there is only one page of courses, no start for next page.\n                                nextPageStart = pageData.limit || false;\n                                pageCourses = (pageData.limit > 0) ? courses.slice(0, pageData.limit) : courses;\n                            }\n\n                            // Finished setting up the current page.\n                            loadedPages[currentPage] = {\n                                courses: pageCourses\n                            };\n\n                            // Set up the next page (if there is more than one page).\n                            const remainingCourses = nextPageStart !== false ? courses.slice(nextPageStart, courses.length) : [];\n                            if (remainingCourses.length) {\n                                loadedPages[currentPage + 1] = {\n                                    courses: remainingCourses\n                                };\n                            }\n\n                            // Set the last page to either the current or next page.\n                            if (loadedPages[currentPage].courses.length < pageData.limit || !remainingCourses.length) {\n                                lastPage = currentPage;\n                                actions.allItemsLoaded(currentPage);\n                            } else if (loadedPages[currentPage + 1] !== undefined\n                                && loadedPages[currentPage + 1].courses.length < pageData.limit) {\n                                lastPage = currentPage + 1;\n                            }\n\n                            courseOffset = coursesData.nextoffset;\n                            return renderCourses(root, loadedPages[currentPage]);\n                        })\n                            .catch(Notification.exception);\n\n                        promises.push(pagePromise);\n                    });\n\n                    return promises;\n                },\n                config\n            );\n\n            pagedContentPromise.then(function(html, js) {\n                registerPagedEventHandlers(root, namespace);\n                return Templates.replaceNodeContents(root.find(Selectors.courseView.region), html, js);\n            }).catch(Notification.exception);\n        };\n\n        /**\n         * Listen to, and handle events for  the myoverview block.\n         *\n         * @param {Object} root The myoverview block container element.\n         */\n        let registerEventListeners = function(root) {\n            CustomEvents.define(root, [\n                CustomEvents.events.activate\n            ]);\n\n            root.on(CustomEvents.events.activate, SELECTORS.ACTION_ADD_FAVOURITE, function(e, data) {\n                let favourite = $(e.target).closest(SELECTORS.ACTION_ADD_FAVOURITE);\n                let courseId = getCourseId(favourite);\n                addToFavourites(root, courseId);\n                data.originalEvent.preventDefault();\n            });\n\n            root.on(CustomEvents.events.activate, SELECTORS.ACTION_REMOVE_FAVOURITE, function(e, data) {\n                let favourite = $(e.target).closest(SELECTORS.ACTION_REMOVE_FAVOURITE);\n                let courseId = getCourseId(favourite);\n                removeFromFavourites(root, courseId);\n                data.originalEvent.preventDefault();\n            });\n\n            root.on(CustomEvents.events.activate, SELECTORS.FAVOURITE_ICON, function(e, data) {\n                data.originalEvent.preventDefault();\n            });\n\n            root.on(CustomEvents.events.activate, SELECTORS.ACTION_HIDE_COURSE, function(e, data) {\n                let target = $(e.target).closest(SELECTORS.ACTION_HIDE_COURSE);\n                let courseId = getCourseId(target);\n                hideCourse(root, courseId);\n                data.originalEvent.preventDefault();\n            });\n\n            root.on(CustomEvents.events.activate, SELECTORS.ACTION_SHOW_COURSE, function(e, data) {\n                let target = $(e.target).closest(SELECTORS.ACTION_SHOW_COURSE);\n                let courseId = getCourseId(target);\n                showCourse(root, courseId);\n                data.originalEvent.preventDefault();\n            });\n        };\n\n        /**\n         * Intialise the courses list and cards views on page load.\n         *\n         * @param {object} root The root element for the courses view.\n         */\n        let init = function(root) {\n            root = $(root);\n            loadedPages = [];\n            lastPage = 0;\n            courseOffset = 0;\n\n            initializePagedContent(root);\n\n            if (!root.attr('data-init')) {\n                registerEventListeners(root);\n                root.attr('data-init', true);\n            }\n        };\n\n        /**\n\n         * Reset the courses views to their original\n         * state on first page load.courseOffset\n         *\n         * This is called when configuration has changed for the event lists\n         * to cause them to reload their data.\n         *\n         * @param {Object} root The root element for the timeline view.\n         */\n        let reset = function(root) {\n            if (loadedPages.length > 0) {\n                loadedPages.forEach(function(courseList, index) {\n                    let pagedContentPage = getPagedContentContainer(root, index);\n                    renderCourses(root, courseList).then(function(html, js) {\n                        return Templates.replaceNodeContents(pagedContentPage, html, js);\n                    }).catch(Notification.exception);\n                });\n            } else {\n                init(root);\n            }\n        };\n\n        return {\n            init: init,\n            reset: reset\n        };\n    });\n"],"names":["define","$","Repository","PagedContentFactory","PubSub","CustomEvents","Notification","Templates","CourseEvents","Selectors","PagedContentEvents","Ajax","EnhancedRepostory","Object","assign","getEnrolledCoursesByTimeline","args","request","methodname","call","SELECTORS","TEMPLATES","GROUPINGS","NUMCOURSES_PERPAGE","loadedPages","courseOffset","lastPage","lastLimit","namespace","getFilterValues","root","courseRegion","find","courseView","region","display","attr","grouping","sort","displaycategories","customfieldname","customfieldvalue","additionalfilter","DEFAULT_PAGED_CONTENT_CONFIG","ignoreControlWhileLoading","controlPlacementBottom","persistentLimitKey","getFavouriteIconContainer","courseId","getPagedContentContainer","index","getCourseId","getAddFavouriteMenuItem","getRemoveFavouriteMenuItem","addToFavourites","removeAction","addAction","setCourseFavouriteState","then","success","publish","favourited","removeClass","addClass","iconContainer","isFavouriteIcon","notFavourteIcon","showFavouriteIcon","alert","catch","exception","removeFromFavourites","unfavorited","hideFavouriteIcon","getHideCourseMenuItem","getShowCourseMenuItem","setCourseHiddenState","status","updateUserPreferences","preferences","type","value","hideElement","id","pagingBar","jumpto","parseInt","reducedCourse","courses","reduce","accumulator","current","push","undefined","newElement","slice","forEach","courseList","popElement","merge","length","pagedContentContainer","resetLastPageNumber","pagedContentPage","renderCourses","html","js","replaceNodeContents","remove","setFavouriteCourses","result","warnings","course","isfavourite","coursesData","currentTemplate","filters","map","showcoursecategory","render","nocoursesimg","setLimit","limit","registerPagedEventHandlers","event","SET_ITEMS_PER_PAGE_LIMIT","subscribe","bind","initializePagedContent","Math","random","pagingLimit","itemsPerPage","active","totalCourseCount","filter","pagingOption","config","extend","eventNamespace","pagedContentPromise","createWithLimit","pagesData","actions","promises","pageData","currentPage","pageNumber","allItemsLoaded","pagePromise","offset","classification","getMyCourses","pageCourses","nextPageStart","currentPageLength","remainingCourses","nextoffset","registerEventListeners","events","activate","on","e","data","favourite","target","closest","originalEvent","preventDefault","hideAction","showAction","hideCourse","showCourse","init","reset"],"mappings":"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"}